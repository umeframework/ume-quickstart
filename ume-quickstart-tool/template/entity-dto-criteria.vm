#set($var_LeftBrackets="(")
#set($var_theOrderByCondition="_orderByClause")

package ${dto.tableDtoPackage};

import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.StringEscapeUtils;

/**
 * 数据表"$dto.className"Criteria类<br>
 *
 * @author Generator
 */
public class ${dto.tableDtoCriteriaClass} {
    protected String orderByClause;
    protected boolean distinct;
    protected List<Criteria> oredCriteria;

    public ${dto.tableDtoCriteriaClass}() {
        oredCriteria = new ArrayList<Criteria>();
    }

    public void setOrderByClause(String orderByClause) {
        this.orderByClause = StringEscapeUtils.escapeSql(orderByClause);
    }
    public String getOrderByClause() {
        return StringEscapeUtils.escapeSql(orderByClause);
    }
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }
    public boolean isDistinct() {
        return distinct;
    }
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }
        public boolean isValid() {
            return criteria.size() > 0;
        }
        public List<Criterion> getAllCriteria() {
            return criteria;
        }
        public List<Criterion> getCriteria() {
            return criteria;
        }
        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }
        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }
        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }


#foreach ( $field in $dto.fieldList )
        public Criteria and${field.fieldIdCap}IsNull() {
            addCriterion("${field.colId} is null");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}IsNotNull() {
            addCriterion("${field.colId} is not null");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}EqualTo(${field.fieldType} value) {
            addCriterion("${field.colId} =", value, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}NotEqualTo(${field.fieldType} value) {
            addCriterion("${field.colId} <>", value, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}GreaterThan(${field.fieldType} value) {
            addCriterion("${field.colId} >", value, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}GreaterThanOrEqualTo(${field.fieldType} value) {
            addCriterion("${field.colId} >=", value, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}LessThan(${field.fieldType} value) {
            addCriterion("${field.colId} <", value, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}LessThanOrEqualTo(${field.fieldType} value) {
            addCriterion("${field.colId} <=", value, "mandt");
            return (Criteria) this;
        }
#if (${field.fieldType} == "String")
        public Criteria and${field.fieldIdCap}Like(${field.fieldType} value) {
            addCriterion("${field.colId} like", value, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}NotLike(${field.fieldType} value) {
            addCriterion("${field.colId} not like", value, "mandt");
            return (Criteria) this;
        }
#end
        public Criteria and${field.fieldIdCap}In(List<${field.fieldType}> values) {
            addCriterion("${field.colId} in", values, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}NotIn(List<${field.fieldType}> values) {
            addCriterion("${field.colId} not in", values, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}Between(${field.fieldType} value1, ${field.fieldType} value2) {
            addCriterion("${field.colId} between", value1, value2, "mandt");
            return (Criteria) this;
        }
        public Criteria and${field.fieldIdCap}NotBetween(${field.fieldType} value1, ${field.fieldType} value2) {
            addCriterion("${field.colId} not between", value1, value2, "mandt");
            return (Criteria) this;
        }
#end
	}

    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    public static class Criterion {
        private String condition;
        private Object value;
        private Object secondValue;
        private boolean noValue;
        private boolean singleValue;
        private boolean betweenValue;
        private boolean listValue;
        private String typeHandler;

        public String getCondition() {
            return condition;
        }
        public Object getValue() {
            return value;
        }
        public Object getSecondValue() {
            return secondValue;
        }
        public boolean isNoValue() {
            return noValue;
        }
        public boolean isSingleValue() {
            return singleValue;
        }
        public boolean isBetweenValue() {
            return betweenValue;
        }
        public boolean isListValue() {
            return listValue;
        }
        public String getTypeHandler() {
            return typeHandler;
        }
        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }
        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }
        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }
        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }
        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
    
    /**
     * addCondition<br>
     * @param conditions
     * @return this
     */
    public ${dto.tableDtoCriteriaClass} addCondition(${dto.tableDtoConditionClass}[] conditions) {
        if (conditions != null) {
            for (${dto.tableDtoConditionClass} e : conditions) {
                addCondition(e);
            }
        }
        return this;
    }
#set($var_InParam="condition")
#set($var_and="and")
    /**
     * addCondition<br>
     * @param ${var_InParam}
     * @return this
     */
    public ${dto.tableDtoCriteriaClass} addCondition(${dto.tableDtoConditionClass} ${var_InParam}) {
        Criteria ac = this.createCriteria();

#foreach ( $field in $dto.fieldList )
#set($var_OptrList="IsNull,IsNotNull")
#foreach ($var_Optr in $var_OptrList.split(","))
        if (${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr}) {
            ac.${var_and}${field.fieldIdCap}${var_Optr}();
        }
#end
#set($var_OptrList="EqualTo,NotEqualTo,GreaterThan,GreaterThanOrEqualTo,LessThan,LessThanOrEqualTo,In,NotIn")
#foreach ($var_Optr in $var_OptrList.split(","))
        if (${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr} != null) {
            ac.${var_and}${field.fieldIdCap}${var_Optr}(${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr});
        }
#end
#if (${field.fieldType} == "String")
#set($var_OptrList="Like,NotLike")
#foreach ($var_Optr in $var_OptrList.split(","))
        if (${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr} != null) {
            ac.${var_and}${field.fieldIdCap}${var_Optr}(${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr});
        }
#end
#end
#set($var_OptrList="Between,NotBetween")
#foreach ($var_Optr in $var_OptrList.split(","))
        if (${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr} != null && ${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr}.size() == 2) {
            ac.${var_and}${field.fieldIdCap}${var_Optr}(${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr}.get(0), ${var_InParam}.${var_and}${field.fieldIdCap}${var_Optr}.get(1));
        }
#end
#end

        if (!this.distinct && ${var_InParam}.distinct) {
            this.setDistinct(${var_InParam}.distinct);
        }
        if (${var_InParam}.orderByClause != null) {
            if (${var_InParam}.orderByClause.trim().startsWith(",")) {
                this.setOrderByClause(this.getOrderByClause() + ${var_InParam}.orderByClause.trim());
            } else {
                this.setOrderByClause(this.getOrderByClause() + "," + ${var_InParam}.orderByClause.trim());
            }
        }
        return this;
    }

    /**
     * addCondition<br>
     * @param entities
     * @return this
     */
    public ${dto.tableDtoCriteriaClass} addCondition(${dto.tableDtoClass}[] entities) {
        if (entities != null) {
            for (${dto.tableDtoClass} e : entities) {
                addCondition(e);
            }
        }
        return this;
    }
#set($var_InParam="entity")
#set($var_and="and")
    /**
     * addCondition<br>
     * @param ${var_InParam}
     * @return this
     */
    public ${dto.tableDtoCriteriaClass} addCondition(${dto.tableDtoClass} ${var_InParam}) {
        Criteria ac = this.createCriteria();

#foreach ( $field in $dto.fieldList )
        if (${var_InParam}.get${field.fieldIdCap} () != null) {
            ac.${var_and}${field.fieldIdCap}EqualTo(${var_InParam}.get${field.fieldIdCap} ());
        }
#end
        if (entity.get${var_theOrderByCondition}() != null) {
            if (entity.get${var_theOrderByCondition}().trim().startsWith(",")) {
                this.setOrderByClause(this.getOrderByClause() + entity.get${var_theOrderByCondition}().trim());
            } else {
                this.setOrderByClause(this.getOrderByClause() + "," + entity.get${var_theOrderByCondition}().trim());
            }
        }
        return this;
    }
}
