package ${dto.tableCrudApiPackage};

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.annotation.Resource;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import ${dto.tableDtoPackage}.${dto.tableDtoClass};
import ${dto.tableDtoPackage}.${dto.tableDtoConditionClass};
import ${dto.tableCrudServiceInterfacePackage}.${dto.tableCrudServiceInterface};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
//import lombok.extern.slf4j.Slf4j;

/**
 * ${dto.TblName}:${dto.tblId} CRUD service implementation.<br>
 * 
 * @author Generator
 */
@CrossOrigin
@Api(value="${dto.TblName}Controller",tags={"${dto.TblName} CRUD API"})
@RequestMapping(value = "/api/entity/${dto.ClassOriIdInLowCase}/v1/")
@RestController
//@Slf4j
public class ${dto.tableCrudApiClass} {
    /**
     * ${dto.tableCrudServiceInterface} 实例<br>
     */
    @Resource
    private ${dto.tableCrudServiceInterface} service;

#if(${dto.primaryKeyFieldList.size()} > 0)
    /**
     * 创建记录<br>
     * 
     * @param entity
     */
	@ApiOperation(value = "创建记录")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	@Transactional
	public Integer create(${dto.tableDtoClass} entity) {
	    doValidate(entity);
        return service.insert(entity);
    }
    
    /**
     * 批量创建记录<br>
     * 
     * @param entities
     */
	@ApiOperation(value = "批量创建记录)")
	@RequestMapping(value = "/create-list", method = RequestMethod.POST)
	@Transactional
    public List<Integer> createList(List<${dto.tableDtoClass}> entities) {
        List<Integer> result = new ArrayList<Integer>();
        if (entities != null) {
            for (${dto.tableDtoClass} entity : entities) {
	            doValidate(entity);
                result.add(service.insert(entity));
            }
        }
        return result;
    }
    
    /**
     * 更新记录<br>
     * 
     * @param entity
     */
	@ApiOperation(value = "更新记录")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@Transactional
    public Integer update(${dto.tableDtoClass} entity) {
	    doValidate(entity);
        return service.updateByPrimaryKeySelective(entity);
    }
    
    /**
     * 批量更新记录<br>
     * 
     * @param entities
     */
	@ApiOperation(value = "批量更新记录")
	@RequestMapping(value = "/update-list", method = RequestMethod.POST)
	@Transactional
    public List<Integer> updateList(List<${dto.tableDtoClass}> entities) {
        List<Integer> result = new ArrayList<Integer>();
        if (entities != null) {
            for (${dto.tableDtoClass} entity : entities) {
                doValidate(entity);
                result.add(service.updateByPrimaryKeySelective(entity));
            }
        }
        return result;
    }
    
    /**
     * 删除记录<br>
     * 
     * @param entity
     */
	@ApiOperation(value = "删除记录")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	@Transactional
    public Integer delete(${dto.tableDtoClass} entity) {
        return service.deleteByPrimaryKey(entity);
    }
    
    /**
     * 批量删除记录<br>
     * 
     * @param entities
     */
	@ApiOperation(value = "批量删除记录")
	@RequestMapping(value = "/delete-list", method = RequestMethod.POST)
	@Transactional
    public List<Integer> deleteList(List<${dto.tableDtoClass}> entities) {
        List<Integer> result = new ArrayList<Integer>();
        if (entities != null) {
            for (${dto.tableDtoClass} entity : entities) {
                result.add(service.deleteByPrimaryKey(entity));
            }
        }
        return result;
    }

    /**
     * 根据主键查询记录<br>
     * 
     * @param entity
     */
	@ApiOperation(value = "根据主键查询记录")
	@RequestMapping(value = "/select-by-primary-key", method = RequestMethod.POST)
    public ${dto.tableDtoClass} selectByPrimaryKey(${dto.tableDtoClass} entity) {
        return service.selectByPrimaryKey(entity);
    }

    /**
     * 根据主键查询记录并锁定<br>
     * 
     * @param entity
     */
	@ApiOperation(value = "根据主键查询记录并锁定")
	@RequestMapping(value = "/select-by-primary-key-for-update", method = RequestMethod.POST)
    public ${dto.tableDtoClass} selectByPrimaryKeyForUpdate(${dto.tableDtoClass} entity) {
        return service.selectByPrimaryKeyForUpdate(entity);
    }
#end

    /**
     * 根据[${dto.tableDtoConditionClass}]条件对象查询实体列表<br>
     * 
     * @param condition
     */
	@ApiOperation(value = "根据[${dto.tableDtoConditionClass}]条件对象查询实体列表")
	@RequestMapping(value = "/select-by-condition", method = RequestMethod.POST)
    public List<${dto.tableDtoClass}> selectByCondition(${dto.tableDtoConditionClass}[] condition) {
        return service.selectByCondition(condition);
    }
    /**
     * 根据[${dto.tableDtoClass}]条件对象查询实体列表<br>
     * 
     * @param entity
     */
	@ApiOperation(value = "根据[${dto.tableDtoClass}]条件对象查询实体列表")
	@RequestMapping(value = "/select-by-entity", method = RequestMethod.POST)
    public List<${dto.tableDtoClass}> selectByEntity(${dto.tableDtoClass}[] entity) {
        return service.selectByEntity(entity);
    }

    /**
     * 根据[${dto.tableDtoConditionClass}]条件对象统计件数<br>
     * 
     * @param condition
     */
	@ApiOperation(value = "根据[${dto.tableDtoConditionClass}]条件对象统计件数")
	@RequestMapping(value = "/count-by-condition", method = RequestMethod.POST)
    public Integer countByCondition(${dto.tableDtoConditionClass}[] condition) {
        return service.countByCondition(condition);
    }
    /**
     * 根据"${dto.tableDtoClass}"条件对象统计件数<br>
     * 
     * @param entity
     */
	@ApiOperation(value = "根据[${dto.tableDtoClass}]条件对象统计件数")
	@RequestMapping(value = "/count-by-entity", method = RequestMethod.POST)
    public Integer countByEntity(${dto.tableDtoClass}[] entity) {
        return service.countByEntity(entity);
    }

    /**
     * doValidate<br>
     * 
     * @param entity
     */
    public void doValidate(${dto.tableDtoClass} entity) {
        Validator validator = validatorFactory.getValidator();
        Iterator<ConstraintViolation<${dto.tableDtoClass}>> violations = validator.validate(entity).iterator();
        StringBuilder msg = new StringBuilder();
        while (violations.hasNext()) {
            ConstraintViolation<${dto.tableDtoClass}> violation = violations.next();
            String prop = violation.getPropertyPath().toString();
            String message = violation.getMessage();
            msg.append(prop);
            msg.append(":");
            msg.append(message);
            msg.append("\n");
        }
        if (msg.length() > 0) {
            throw new RuntimeException(msg.toString());
        }
    }
    
    /**
     * validatorFactory
     */
    private static ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();
}
