package ${dto.tableCrudServiceInterfacePackage};

import java.util.List;
import java.util.Map;
import org.apache.ibatis.session.RowBounds;
import ${dto.tableDtoPackage}.${dto.tableDtoClass};
import ${dto.tableDtoPackage}.${dto.tableDtoConditionClass};
import ${dto.tableDtoPackage}.${dto.tableDtoCriteriaClass};

/**
 * ${dto.TblName}:${dto.tblId} CRUD service interface declare.<br>
 *
 * @author Generator
 */
public interface ${dto.tableCrudServiceInterface} {

###if(${dto.primaryKeyFieldList.size()} > 0)
    /**
     * insert record.<br>
     * 
     * @param record
     * @return
     */
    Integer insert(${dto.tableDtoClass} record);
    /**
     * insert selective record.<br>
     * 
     * @param record
     * @return
     */
    Integer insertSelective(${dto.tableDtoClass} record);
    /**
     * update by primary key selective.<br>
     * 
     * @param record
     * @return
     */
    Integer updateByPrimaryKeySelective(${dto.tableDtoClass} record);
    /**
     * update by primary key.<br>
     * 
     * @param record
     * @return
     */
    Integer updateByPrimaryKey(${dto.tableDtoClass} record);
    /**
     * delete by primary key.<br>
     * 
     * @param record
     * @return
     */
    Integer deleteByPrimaryKey(${dto.tableDtoClass} record);
    /**
     * select by primary key.<br>
     * 
     * @param record
     * @return ${dto.tableDtoClass}
     */
    ${dto.tableDtoClass} selectByPrimaryKey(${dto.tableDtoClass} record);    
    /**
     * select by primary key with row lock.<br>
     * 
     * @param record
     * @return ${dto.tableDtoClass}
     */
    ${dto.tableDtoClass} selectByPrimaryKeyForUpdate(${dto.tableDtoClass} record);
###end

    /**
     * select by example with Rowbounds.<br>
     * 
     * @param example
     * @param rowBounds
     * @return ${dto.tableDtoClass} list
     */
    List<${dto.tableDtoClass}> selectByExampleWithRowbounds(${dto.tableDtoCriteriaClass} example, RowBounds rowBounds);
    /**
     * select by example<br>
     * 
     * @param example
     * @return ${dto.tableDtoClass} list
     */
    List<${dto.tableDtoClass}> selectByExample(${dto.tableDtoCriteriaClass} example);
    /**
     * select by example with return map list<br>
     * 
     * @param example
     * @return map list
     */
    List<Map<String, Object>> selectByExampleReturnMap(${dto.tableDtoCriteriaClass} example);
    /**
     * select by condition<br>
     * 
     * @param condition
     * @return ${dto.tableDtoClass} list
     */
    List<${dto.tableDtoClass}> selectByCondition(${dto.tableDtoConditionClass}[] condition);
    /**
     * select by condition return map list<br>
     * 
     * @param condition
     * @return map list
     */
    List<Map<String, Object>> selectByConditionReturnMap(${dto.tableDtoConditionClass}[] condition);
    /**
     * select by entity<br>
     * 
     * @param entity
     * @return ${dto.tableDtoClass} list
     */
    List<${dto.tableDtoClass}> selectByEntity(${dto.tableDtoClass}[] entity);
    /**
     * select by entity return map list<br>
     * 
     * @param entity
     * @return map list
     */
    List<Map<String, Object>> selectByEntityReturnMap(${dto.tableDtoClass}[] entity);
    /**
     * count by example.<br>
     * 
     * @param example
     * @return matched record number
     */
    Integer countByExample(${dto.tableDtoCriteriaClass} example);
    /**
     * count by condition.<br>
     * 
     * @param condition
     * @return matched record number
     */
    Integer countByCondition(${dto.tableDtoConditionClass}[] condition);
    /**
     * count by entities.<br>
     * 
     * @param entity
     * @return matched record number
     */
    Integer countByEntity(${dto.tableDtoClass}[] entity);
}
