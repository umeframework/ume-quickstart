package ${dto.tableCrudServicePackage};

import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.apache.ibatis.session.RowBounds;
import org.springframework.stereotype.Service;
import ${dto.tableMapperPackage}.${dto.tableMapperClass};
import ${dto.tableDtoPackage}.${dto.tableDtoClass};
import ${dto.tableDtoPackage}.${dto.tableDtoConditionClass};
import ${dto.tableDtoPackage}.${dto.tableDtoCriteriaClass};
import ${dto.tableCrudServiceInterfacePackage}.${dto.tableCrudServiceInterface};

/**
 * ${dto.TblName}:${dto.tblId} CRUD service implementation.<br>
 *
 * @author Generator
 */
@Service
public class ${dto.tableCrudServiceClass} implements ${dto.tableCrudServiceInterface} {
    /**
     * ${dto.tableMapperClass}实例<br>
     */
    @Autowired
    private ${dto.tableMapperClass} mapper;

###if(${dto.primaryKeyFieldList.size()} > 0)
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#insert
     */
    @Override
	public Integer insert(${dto.tableDtoClass} record) {
#if(${dto.generateDefaultTableField} == 1)
        if (record.getCreateAuthor() == null && getLoginUserId() != null) {
            record.setCreateAuthor(getLoginUserId());
        }
        if (record.getUpdateAuthor() == null && getLoginUserId() != null) {
            record.setUpdateAuthor(getLoginUserId());
        }
#end
        int result = mapper.insert(record);
        return result;
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#insertSelective
     */
    @Override
    public Integer insertSelective(${dto.tableDtoClass} record) {
#if(${dto.generateDefaultTableField} == 1)
        if (record.getCreateAuthor() == null && getLoginUserId() != null) {
            record.setCreateAuthor(getLoginUserId());
        }
        if (record.getUpdateAuthor() == null && getLoginUserId() != null) {
            record.setUpdateAuthor(getLoginUserId());
        }
#end
        int result = mapper.insertSelective(record);
        return result;
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#updateByPrimaryKeySelective
     */
    @Override
    public Integer updateByPrimaryKeySelective(${dto.tableDtoClass} record) {
#if(${dto.generateDefaultTableField} == 1)
        if (record.getUpdateAuthor() == null && getLoginUserId() != null) {
            record.setUpdateAuthor(getLoginUserId());
        }
#end
        int result = mapper.updateByPrimaryKeySelective(record);
        return result;
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#updateByPrimaryKey
     */
    @Override
    public Integer updateByPrimaryKey(${dto.tableDtoClass} record) {
#if(${dto.generateDefaultTableField} == 1)
        if (record.getUpdateAuthor() == null && getLoginUserId() != null) {
            record.setUpdateAuthor(getLoginUserId());
        }
#end
        int result = mapper.updateByPrimaryKey(record);
        return result;
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#deleteByPrimaryKey
     */
    @Override
    public Integer deleteByPrimaryKey(${dto.tableDtoClass} record) {
        int result = mapper.deleteByPrimaryKey(record);
        return result;
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByPrimaryKey
     */
    @Override
    public ${dto.tableDtoClass} selectByPrimaryKey(${dto.tableDtoClass} record) {
        return mapper.selectByPrimaryKey(record);
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByPrimaryKeyForUpdate
     */
    @Override
    public ${dto.tableDtoClass} selectByPrimaryKeyForUpdate(${dto.tableDtoClass} record) {
        return mapper.selectByPrimaryKeyForUpdate(record);
    }
###end

    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByExampleWithRowbounds
     */
    @Override
    public List<${dto.tableDtoClass}> selectByExampleWithRowbounds(${dto.tableDtoCriteriaClass} example, RowBounds rowBounds) {
        return mapper.selectByExampleWithRowbounds(example, rowBounds);
    }    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByExample
     */
    @Override
    public List<${dto.tableDtoClass}> selectByExample(${dto.tableDtoCriteriaClass} example) {
        return mapper.selectByExample(example);
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByExampleReturnMap
     */
    @Override
    public List<Map<String, Object>> selectByExampleReturnMap(${dto.tableDtoCriteriaClass} example) {
        return mapper.selectByExampleReturnMap(example);
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByCondition
     */
    @Override
    public List<${dto.tableDtoClass}> selectByCondition(${dto.tableDtoConditionClass}[] condition) {
        ${dto.tableDtoCriteriaClass} example = new ${dto.tableDtoCriteriaClass}();
        example.addCondition(condition);
        return selectByExample(example);
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByConditionReturnMap
     */
    @Override
    public List<Map<String, Object>> selectByConditionReturnMap(${dto.tableDtoConditionClass}[] condition) {
        ${dto.tableDtoCriteriaClass} example = new ${dto.tableDtoCriteriaClass}();
        example.addCondition(condition);
        return selectByExampleReturnMap(example);
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByEntity
     */
    @Override
    public List<${dto.tableDtoClass}> selectByEntity(${dto.tableDtoClass}[] entity) {
        ${dto.tableDtoCriteriaClass} example = new ${dto.tableDtoCriteriaClass}();
        example.addCondition(entity);
        return selectByExample(example);
    }    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#selectByEntityReturnMap
     */
    @Override
    public List<Map<String, Object>> selectByEntityReturnMap(${dto.tableDtoClass}[] entity) {
        ${dto.tableDtoCriteriaClass} example = new ${dto.tableDtoCriteriaClass}();
        example.addCondition(entity);
        return selectByExampleReturnMap(example);
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#countByExample
     */
    @Override
    public Integer countByExample(${dto.tableDtoCriteriaClass} example) {
        return mapper.countByExample(example);
    }
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#countByCondition
     */
    @Override
    public Integer countByCondition(${dto.tableDtoConditionClass}[] condition) {
        ${dto.tableDtoCriteriaClass} example = new ${dto.tableDtoCriteriaClass}();
        example.addCondition(condition);
        return mapper.countByExample(example);
    }    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#countByEntity
     */
    @Override
    public Integer countByEntity(${dto.tableDtoClass}[] entity) {
        ${dto.tableDtoCriteriaClass} example = new ${dto.tableDtoCriteriaClass}();
        example.addCondition(entity);
        return mapper.countByExample(example);
    }
    
	/**
	 * getLoginUserId
	 * 
	 * @return the uid
	 */
	public String getLoginUserId() {
		return null;
	}
	
}
